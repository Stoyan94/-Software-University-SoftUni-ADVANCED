🧠 Да изясним терминологията и логиката зад **делегати**, `Func<>`, `Action<>` и `Predicate<>`
   , защото това е една от онези теми, където човек може да се обърка, ако не му е обяснено както трябва.

---

## 🧠 Основна идея: Всички са **делегати**

Да, **всички те (Func, Action, Predicate)** са **делегати**. Тоест:

### ✅ Правилно е да се каже:

> **"Всички са разновидности на делегати" * *
> или
> **"Всичко това са делегатни типове, използвани за различни цели." * *

---

## 🧩 Какво е **делегат** по принцип?

> **Делегат * * = **тип, който представлява метод**
> („указател“ към метод – като функция, която може да бъде подадена, запазена, извикана)

1. Какво е делегат в C#?
Делегатът е тип, който представлява указател към метод — т.е. можеш да го използваш, за да "подаваш функции като параметри".

📦 Аналогия:
Представи си, че имаш празна кутия (делегат), в която можеш да сложиш метод и после да използваш тази кутия навсякъде. 
Кутията знае какви входове и изходи очаква.

### Собствен делегат (custom):

```csharp
public delegate int MyMathOperation(int x, int y);
```

Това е **ръчно дефиниран делегат**.

---

## ✅ А сега – какво са `Func`, `Action`, `Predicate`?

Те са **вградени типове делегати**, които .NET ни дава, за да не пишем всеки път наши си типове.

---

### 🧩 `Func<T1, T2, ..., TResult>`

* **Представлява делегат**, който приема 0 до 16 аргумента и **връща стойност от тип `TResult`**.
* Последният параметър е **резултатът (връщаното)**.

```csharp
Func<int, int, int> add = (a, b) => a + b;
// Приема 2 int, връща int
```

---

### 🧩 `Action<T1, T2, ...>`

***Делегат, който не връща нищо (void)**.
* Action<> не връща стойност (void). Използва се за действия – печат, логване, промяна на стойности и т.н.

```csharp
 Печат на елементи от списък

List<string> fruits = new List<string> { "Apple", "Banana", "Cherry" };

Action<List<string>> printList = list =>
{
    foreach (var item in list)
        Console.WriteLine(item);
};

printList(fruits);
📌 Приема: списък
📌 Връща: void, отпечатва всеки елемент
```

---


### 🧩 2. Какво е предикат (Predicate)?
    public delegate bool Predicate<T>(T obj);


*Специализиран делегат, който приема **един параметър** и връща **`bool`**.
* Използва се най-често за **филтриране, търсене, проверки**.

```csharp
List<int> numbers = new List<int> { 1, 2, 3, 4, 5 };

Predicate<int> isEven = n => n % 2 == 0;

List<int> even = numbers.FindAll(isEven);
📌 Обяснение:

Predicate<int> е делегат, който взема int, връща bool.

isEven казва: "ако n % 2 == 0 – значи е четно".

FindAll(isEven) минава през списъка и връща само тези, за които isEven(n) връща true.
// Връща true/false
```

---


Пример с всички:
// Делегат
public delegate void MyPrint(string text);

void PrintSomething(string txt) => Console.WriteLine(txt);

MyPrint printer = PrintSomething;
printer("Hello");

// Action (връща void)
Action<string> act = txt => Console.WriteLine($"Action: {txt}");
act("World");

// Func (връща стойност)
Func<int, int, int> add = (a, b) => a + b;
Console.WriteLine(add(3, 4));

// Predicate (връща bool)
Predicate<int> isPositive = x => x > 0;
Console.WriteLine(isPositive(-2)); // false




Делегат vs.Предикат vs. Lambda

| Тип              | Приема            | Връща                   | Пример                                             |
| ---------------- | ----------------- | ----------------------- | -------------------------------------------------- |
| Delegate         | Каквото зададеш   | Каквото зададеш         | `delegate int MyDel(int x, int y)`                 |
| **Func < T > **  | 0 до 16 аргумента | Последният тип е връщан | `Func<int, int, int>` = (a, b) => a + b            |
| **Action<T>**    | 0 до 16 аргумента | Нищо (`void`)           | `Action<string>` = name => Console.WriteLine(name) |
| **Predicate<T>** | 1 аргумент        | `bool`                  | `Predicate<int>` = x => x > 0                      |


## 📊 Сравнителна таблица:

| Делегат тип           | Приема            | Връща         | Типична употреба                      |
| --------------------- | ----------------- | ------------- | ------------------------------------- |
| `delegate`            | Каквото дефинираш | Каквото искаш | Собствено дефиниран указател към метод - Ръчно дефиниране на методни типове    |
| `Func<T1,.., TResult>`| 0–16 аргумента    | `TResult`     | Делегат, който** връща стойност** - Когато трябва да върнеш стойност      |
| `Action<T1,..>`       | 0–16 аргумента    | `void`        | Делегат, който** не връща стойност (void)** - Изпълнение на действие (без резултат) |
| `Predicate<T>`        | 1 аргумент        | `bool`        | Делегат, който връща **bool** Проверки, филтри, условия |

---

## 📌 Кога да използваш какво?

| Случай                                            | Подходящо решение   |
| ------------------------------------------------- | ------------------- |
| Имаш метод, който** връща резултат**              | `Func<T>`           |
| Имаш метод, който** изпълнява нещо, но не връща** | `Action<T>`         |
| Имаш метод, който проверява **условие**           | `Predicate<T>`      |
| Искаш** по-сложен/именован делегат тип**          | `delegate` (custom) |

---

## 🧠 Как да го запомниш лесно?

| Ключова дума  | Какво значи                           |
| ------------- | ------------------------------------- |
| **Func**      | Function → нещо, което ВРЪЩА стойност |
| **Action**    | Действие → прави нещо, но НЕ връща    |
| **Predicate** | Проверка → върнато е винаги `bool`    |



---