---

## 📌 Какво е Lambda Expression?

**Lambda expression** е кратък начин да напишеш **анонимна функция** — т.е. функция **без име**, която можеш да използваш на място.

🔹 **Синтаксис:**

```csharp
(parameters) => expression_or_statement_block
```

---

## 🧠 Аналогия:

Представи си, че си в ресторант.

* Обикновено казваш: "Извикай Иван, готвача, той знае рецептата."
* С lambda expression: „Кажи на някого веднага да направи баница така: вземи кори, добави сирене, навий, и печи.“

С други думи: вместо да използваш **отделно име и място**, казваш **директно какво да се направи**, на място.

---

## 🔨 Прости примери:

### ✅ Пример 1: Сортиране на списък

```csharp
List<int> numbers = new List<int> { 5, 2, 8, 1 };

numbers.Sort((a, b) => a.CompareTo(b)); // Сравнява "a" с "b"
```

🔍 **Обяснение:**

* `(a, b)` са параметри(като аргументи във функция).
* `=>` означава „става“ или „върни“.
* `a.CompareTo(b)` е самото действие (връща -1, 0 или 1 за сортиране).

🧠 **Аналогия:** „Подреди ги така, че ако `a` е по-малко от `b`, то `a` идва първо.“

---

### ✅ Пример 2: Филтриране на списък

```csharp
List<int> numbers = new List<int> { 1, 2, 3, 4, 5 };

var even = numbers.Where(n => n % 2 == 0).ToList();
```

🔍 **Обяснение:**

* `n => n % 2 == 0` означава: „за всяко `n`, ако е делимо на 2 (четно), го включи.“

🧠 **Аналогия:** „От този списък ми дай само числата, които са четни.“

---

### ✅ Пример 3: Делегат с ламбда

```csharp
Func<int, int, int> add = (a, b) => a + b;

int result = add(3, 5); // result = 8
```

🔍 **Обяснение:**

* `Func<int, int, int>` е делегат, който приема 2 `int` и връща 1 `int`.
* Ламбдата `(a, b) => a + b` описва какво прави: събира `a` и `b`.

🧠 **Аналогия:** „Когато ти дам 2 числа, ги събери и върни резултата.“

---

## 🧠 Как да ги запомниш?

### Мнемоника:

```
(аргументи) => резултат
```

Пример:

```csharp
x => x * 2 // вземи x и върни двойния му размер
```

---

## 🧪 Lambda vs. Method:

```csharp
int Square(int x) {
    return x * x;
}

// С ламбда:
Func<int, int> square = x => x * x;
```

💡 Ламбдата е като „on-the-fly“ функция, без да я дефинираш отделно.

---

## 🤖 Къде най-често ще ги срещнеш?

* В LINQ (Where, Select, First, Any…)
* В делегати и събития
* При `Task`, `Thread`, `async/await` context-и
* В callback-и и event-driven код

---

## 💥 Пример от реалния свят:

```csharp
var names = new List<string> { "Ivan", "Maria", "Georgi" };

var filtered = names.Where(name => name.StartsWith("I")).ToList();
```

📌 „Вземи всички имена, които започват с 'I'.“

---

## ✅ Супер кратко обобщение:

| Част          | Обяснение                              |
| ------------- | -------------------------------------- |
| `()`          | параметри                              |
| `=>`          | стрелка, казва "върни това"            |
| `x => x * 2`  | вземи `x`, върни `x*2`                 |
| LINQ + lambda | филтрирай, трансформирай списъци лесно |

---